{{- if .Values.authnWebhook.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-jwt-authn-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    k8s-app: kube-jwt-authn-webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kube-jwt-authn-webhook
  template:
    metadata:
      labels:
        k8s-app: kube-jwt-authn-webhook
        app: kube-jwt-authn-webhook
        networking.gardener.cloud/from-prometheus: allowed
        networking.gardener.cloud/to-dns: allowed
        networking.gardener.cloud/to-shoot-apiserver: allowed
        networking.gardener.cloud/to-public-networks: allowed
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        prometheus.io/scrape: 'true'
        prometheus.io/path: /metrics
        prometheus.io/port: '2112'
    spec:
      containers:
      - name: kubernetes-authn-webhook
        image: {{ index .Values.images "authn-webhook" }}
        imagePullPolicy: {{ .Values.config.global.imagePullPolicy }}
        ports:
        - containerPort: {{ .Values.authnWebhook.port }}
          protocol: TCP
        - containerPort: 2112
          name: monitoring
        env:
        - name: LISTEN
          value: ":{{ .Values.authnWebhook.port }}"
        - name: TLSCERTFILE
          value: /etc/webhook/certs/kube-jwt-authn-webhook-server.crt
        - name: TLSKEYFILE
          value: /etc/webhook/certs/kube-jwt-authn-webhook-server.key
        - name: ISSUER
          value: {{ .Values.authnWebhook.oidc.issuerUrl }}
        - name: CLIENTID
          value: {{ .Values.authnWebhook.oidc.issuerClientId }}
        - name: GROUPSPREFIXTOREMOVE
          value: k8s
        - name: TENANT
          value: {{ .Values.authnWebhook.tenant }}
        - name: PROVIDERTENANT
          value: {{ .Values.authnWebhook.providerTenant }}
        - name: CLUSTER
          value: {{ .Values.authnWebhook.clusterName }}
        - name: DEBUG
          value: {{ quote .Values.authnWebhook.debug }}
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook/certs
          readOnly: true
      volumes:
      - name: webhook-certs
        secret:
            secretName: kube-jwt-authn-webhook-server
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: kube-jwt-authn-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    app: kube-jwt-authn-webhook
spec:
  selector:
    app: kube-jwt-authn-webhook
  ports:
  - port: 443
    targetPort: {{ .Values.authnWebhook.port }}

---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
    name: kube-jwt-authn-webhook-allow-namespace
    namespace: {{ .Release.Namespace }}
spec:
    podSelector:
        matchLabels:
            app: kube-jwt-authn-webhook
    ingress:
    - from:
      - podSelector:
            matchLabels:
                app: kubernetes
                role: apiserver

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    name: kubeapi2kube-jwt-authn-webhook
    namespace: {{ .Release.Namespace }}
spec:
    egress:
    - ports:
      - port: 443
        protocol: TCP
      to:
      - podSelector:
            matchLabels:
                app: kube-jwt-authn-webhook
    podSelector:
        matchLabels:
            app: kubernetes
            role: apiserver
    policyTypes:
    - Egress
{{- end }}
