// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/client/kubernetes (interfaces: ChartApplier)

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	context "context"
	chartrenderer "github.com/gardener/gardener/pkg/chartrenderer"
	kubernetes "github.com/gardener/gardener/pkg/client/kubernetes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChartApplier is a mock of ChartApplier interface
type MockChartApplier struct {
	ctrl     *gomock.Controller
	recorder *MockChartApplierMockRecorder
}

// MockChartApplierMockRecorder is the mock recorder for MockChartApplier
type MockChartApplierMockRecorder struct {
	mock *MockChartApplier
}

// NewMockChartApplier creates a new mock instance
func NewMockChartApplier(ctrl *gomock.Controller) *MockChartApplier {
	mock := &MockChartApplier{ctrl: ctrl}
	mock.recorder = &MockChartApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartApplier) EXPECT() *MockChartApplierMockRecorder {
	return m.recorder
}

// ApplyChart mocks base method
func (m *MockChartApplier) ApplyChart(arg0 context.Context, arg1, arg2, arg3 string, arg4, arg5 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChart", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyChart indicates an expected call of ApplyChart
func (mr *MockChartApplierMockRecorder) ApplyChart(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChart", reflect.TypeOf((*MockChartApplier)(nil).ApplyChart), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ApplyChartInNamespace mocks base method
func (m *MockChartApplier) ApplyChartInNamespace(arg0 context.Context, arg1, arg2, arg3 string, arg4, arg5 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChartInNamespace", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyChartInNamespace indicates an expected call of ApplyChartInNamespace
func (mr *MockChartApplierMockRecorder) ApplyChartInNamespace(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChartInNamespace", reflect.TypeOf((*MockChartApplier)(nil).ApplyChartInNamespace), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ApplyChartInNamespaceWithOptions mocks base method
func (m *MockChartApplier) ApplyChartInNamespaceWithOptions(arg0 context.Context, arg1, arg2, arg3 string, arg4, arg5 map[string]interface{}, arg6 kubernetes.ApplierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChartInNamespaceWithOptions", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyChartInNamespaceWithOptions indicates an expected call of ApplyChartInNamespaceWithOptions
func (mr *MockChartApplierMockRecorder) ApplyChartInNamespaceWithOptions(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChartInNamespaceWithOptions", reflect.TypeOf((*MockChartApplier)(nil).ApplyChartInNamespaceWithOptions), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ApplyChartWithOptions mocks base method
func (m *MockChartApplier) ApplyChartWithOptions(arg0 context.Context, arg1, arg2, arg3 string, arg4, arg5 map[string]interface{}, arg6 kubernetes.ApplierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChartWithOptions", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyChartWithOptions indicates an expected call of ApplyChartWithOptions
func (mr *MockChartApplierMockRecorder) ApplyChartWithOptions(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChartWithOptions", reflect.TypeOf((*MockChartApplier)(nil).ApplyChartWithOptions), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ApplyManifest mocks base method
func (m *MockChartApplier) ApplyManifest(arg0 context.Context, arg1 kubernetes.UnstructuredReader, arg2 kubernetes.ApplierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyManifest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyManifest indicates an expected call of ApplyManifest
func (mr *MockChartApplierMockRecorder) ApplyManifest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyManifest", reflect.TypeOf((*MockChartApplier)(nil).ApplyManifest), arg0, arg1, arg2)
}

// Render mocks base method
func (m *MockChartApplier) Render(arg0, arg1, arg2 string, arg3 map[string]interface{}) (*chartrenderer.RenderedChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chartrenderer.RenderedChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render
func (mr *MockChartApplierMockRecorder) Render(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockChartApplier)(nil).Render), arg0, arg1, arg2, arg3)
}

// RenderArchive mocks base method
func (m *MockChartApplier) RenderArchive(arg0 []byte, arg1, arg2 string, arg3 map[string]interface{}) (*chartrenderer.RenderedChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderArchive", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chartrenderer.RenderedChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderArchive indicates an expected call of RenderArchive
func (mr *MockChartApplierMockRecorder) RenderArchive(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderArchive", reflect.TypeOf((*MockChartApplier)(nil).RenderArchive), arg0, arg1, arg2, arg3)
}
